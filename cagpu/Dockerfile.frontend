# syntax=docker/dockerfile:1

FROM node:20-alpine AS deps
WORKDIR /app
# No NODE_ENV=production aqu√≠; necesitamos devDependencies (Next.js/Tailwind)
COPY package.json package-lock.json* yarn.lock* pnpm-lock.yaml* ./
RUN if [ -f package-lock.json ]; then npm ci --include=dev; \
    elif [ -f yarn.lock ]; then corepack enable && yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm install --frozen-lockfile; \
    else npm install; fi

FROM node:20-alpine AS builder
WORKDIR /app
# Variables SOLO para build
ARG JWT_SECRET=build_dummy_secret_for_nextjs_build_only_1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef
ARG DATABASE_URL=postgresql://user:password@localhost:5432/dbname?schema=public
ENV JWT_SECRET=${JWT_SECRET}
ENV DATABASE_URL=${DATABASE_URL}
ENV NEXT_TELEMETRY_DISABLED=1
COPY --from=deps /app/node_modules ./node_modules
COPY . .
# Generar Prisma Client si existe
RUN npx prisma generate || true
# Construir Next.js
RUN npm run build

FROM node:20-alpine AS runner
WORKDIR /app
ENV NODE_ENV=production
ENV PORT=3000
COPY --from=builder /app/.next ./.next
# COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json
COPY --from=deps /app/node_modules ./node_modules
EXPOSE 3000
CMD ["sh", "-c", "npm run start -- -p ${PORT}"]
