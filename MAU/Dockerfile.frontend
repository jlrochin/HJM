# syntax=docker/dockerfile:1

FROM node:20-alpine AS builder
WORKDIR /app
# No establecer NODE_ENV=production aquí; necesitamos devDependencies para construir
# Copiar definiciones y lockfiles desde frontend/
COPY frontend/package.json frontend/package-lock.json* frontend/yarn.lock* frontend/pnpm-lock.yaml* ./
RUN if [ -f package-lock.json ]; then npm ci --include=dev; \
    elif [ -f yarn.lock ]; then corepack enable && yarn install --frozen-lockfile; \
    elif [ -f pnpm-lock.yaml ]; then corepack enable && pnpm install --frozen-lockfile; \
    else npm install; fi
# Copiar el código fuente real del frontend
COPY frontend/ .
RUN npm run build

FROM nginx:1.27-alpine AS runner
COPY --from=builder /app/dist /usr/share/nginx/html
RUN printf "server {\n  listen 80;\n  root /usr/share/nginx/html;\n  location /mau/ {\n    rewrite ^/mau/(.*)$ /\$1 last;\n  }\n  location / {\n    try_files \$uri \$uri/ /index.html;\n  }\n}\n" > /etc/nginx/conf.d/default.conf
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
